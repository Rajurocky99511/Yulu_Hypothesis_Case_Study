# -*- coding: utf-8 -*-
"""Yulu_Hypothesis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hs5kyk4MjIYhEc0ZCb57rXATnSGC1mbt
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind,chi2_contingency,levene,kruskal,f_oneway
from statsmodels.graphics.gofplots import qqplot

df=pd.read_csv('yulu.csv')
df.head()

df.info()

#conversion of categorical attributes to 'category'
df[['season','holiday','workingday','weather']]=df[['season','holiday','workingday','weather']].astype('str')

#season category
df['season'] = df['season'].str.strip()
df['season'] = df['season'].apply(lambda x: 'spring' if x == '1'
                                  else ('summer' if x == '2' else ('fall' if x == '3' else 'winter')))
print(df['season'].unique())

#weather category
df['weather'] = df['weather'].str.strip()
df['weather']=df['weather'].apply(lambda x: 'Clear, Few clouds, partly cloudy' if x=='1'
else('Mist + Cloudy, Mist + Broken clouds,Mist + Few clouds,Mist'
if x=='2' else('Light Snow,Light Rain + Thunderstorm + Scattered clouds,Light Rain + Scattered clouds'
if x=='3' else 'Heavy Rain + Ice Pallets + Thunderstorm + Mist,Snow + Fog')))
print(df['weather'].unique())

df.info()

#summary
df.describe()

df.describe(include=object)

sns.histplot(x='temp',data=df)

sns.countplot(x='windspeed',data=df)
plt.xticks(rotation=90)
plt.show()

sns.histplot(x='humidity',data=df,color='b')
plt.xticks(rotation=90)
plt.show()

#Relation between working day and count
workday=df.groupby('workingday')['count'].sum().reset_index()
workday

fig=plt.figure(figsize=(4,3))
sns.barplot(x='workingday',y='count',data=workday,width=0.8)
plt.show()

#Relation between weather and count
df_weather=df.groupby('weather')['count'].sum().reset_index()
df_weather

fig=plt.figure(figsize=(4,3))
sns.barplot(y='weather',x='count',data=df_weather,width=0.5)
plt.yticks(rotation=15)
plt.show()

#Relation between season and count
df_season=df.groupby('season')['count'].sum().reset_index()
df_season

fig=plt.figure(figsize=(4,3))
sns.barplot(x='season',y='count',data=df_season,width=0.8)
plt.show()



"""## 1)Checking wheather Working Day has an effect on the number of electric cycles rented"""

#h0:There is no significance difference between working and number of electric cycles rented
#ha:There is a significance difference between working and number of electric cycles rented
holiday=df[df['workingday']=='0']['count']
workday=df[df['workingday']=='1']['count']
t_statistic,p_val=ttest_ind(workday,holiday)
print('statistic:',t_statistic,'p_value:',p_val)
if p_val>0.05:
  print('Accept H0,There is no significance difference between working and number of electric cycles rented')
else:
   print('Reject H0,There is a significance difference between working and number of electric cycles rented')

"""## 2)Check if no. of cycles rented is similar or different in different seasons"""

df.head()

"""#Anova test"""

df.groupby('season')['count'].sum()

"""## #Test whether data is guassian or not"""

season_1 = df[df['season'] == 'spring']['count']
season_2 = df[df['season'] == 'summer']['count']
season_3 = df[df['season'] == 'fall']['count']
season_4 = df[df['season'] == 'winter']['count']
fig=plt.figure(figsize=(12,5))
plt.subplot(1,4,1)
sns.histplot(season_1,color='g')
plt.title('season1-spring')
plt.subplot(1,4,2)
sns.histplot(season_2,color='r')
plt.title('season2-summer')
plt.subplot(1,4,3)
sns.histplot(season_3,color='y')
plt.title('season3-fall')
plt.subplot(1,4,4)
sns.histplot(season_4,color='b')
plt.title('season4-winter')
plt.suptitle('All 4 seasons count')
plt.show()

"""****From above plots we can see that the data points are leftly skewed and they are not normally distributed/guassian distribution

# #qqplot
"""

qqplot(season_1, line='s')
plt.title('Season 1 QQ Plot')

fig=plt.figure(figsize=(4,3))
qqplot(season_2, line='s')
plt.title('Season 2 QQ Plot')
plt.show()

fig=plt.figure(figsize=(4,3))
qqplot(season_3, line='s')
plt.title('Season 3 QQ Plot')
plt.show()

fig=plt.figure(figsize=(4,3))
qqplot(season_4, line='s')
plt.title('Season 4 QQ Plot')
plt.show()

"""****From above we can say that the data is not guassian

# Shapiro test
---It only works for 50 to 200 samples

# Shapiro test
---It only works for 50 to 200 samples
"""

#H0: the sample has a Gaussian distribution.
#Ha: the sample does not have a Gaussian distribution.
from scipy.stats import shapiro
season1_samp=season_1.sample(200)
season2_samp=season_2.sample(200)
season3_samp=season_3.sample(200)
season4_samp=season_4.sample(200)
stat,p=shapiro(season1_samp)
print('stat=%.3f, p=%.3f' % (stat, p))
if p >0.05:
    print('Accept H0,Probably  Gaussian')
else:
    print('Reject H0,Probably not Gaussian')

#season2
stat,p=shapiro(season2_samp)
print('stat=%.3f, p=%.3f' % (stat, p))
if p <0.05:
    print('Probably not Gaussian')
else:
    print('Probably Gaussian')

#season3
stat,p=shapiro(season3_samp)
print('stat=%.3f, p=%.3f' % (stat, p))
if p <0.05:
    print('Probably not Gaussian')
else:
    print('Probably Gaussian')

#season4
stat,p=shapiro(season4_samp)
print('stat=%.3f, p=%.3f' % (stat, p))
if p <0.05:
    print('Probably not Gaussian')
else:
    print('Probably Gaussian')

"""## Levene's test
---To check equality of variance between two different samples

## Levene's test
---To check equality of variance between two different samples
"""

#H0: All the samples variances are equal
#H1: At least one variance is different from the rest
stat, p = levene(season_1,season_2,season_3,season_4)
print('stat=%.3f, p=%.3f' % (stat, p))
if p > 0.05:
    print('Probably the same variances')
else:
    print('Probably at least one variance is different from the rest')

"""***Thus from levene test we can conclude that there is a significance difference between there variances

***since the assumptions of Anova test does not followed,so we use kruskal test
"""

#H0:There is no significance difference between the number of cycles rented in different seasons
#Ha:There is a significance difference between the number of cycles rented in different seasons
stat,p=kruskal(season_1,season_2,season_3,season_4)
print('stat=%.3f, p=%.3f' % (stat, p))
if p > 0.05:
    print('Accept H0,There is no significance difference between the number of cycles rented in different seasons')
else:
    print('Reject H0,There is a significance difference between the number of cycles rented in different seasons')

"""## 3)Check if no. of cycles rented is similar or different in different weathers

#Anova

### #Test whether data is guassian or not
"""

weather_1 = df[df['weather'].str.strip() == 'Clear, Few clouds, partly cloudy']['count']
weather_2 = df[df['weather'].str.strip() == 'Mist + Cloudy, Mist + Broken clouds,Mist + Few clouds,Mist']['count']
weather_3 = df[df['weather'].str.strip() == 'Light Snow,Light Rain + Thunderstorm + Scattered clouds,Light Rain + Scattered clouds']['count']
weather_4 = df[df['weather'].str.strip() == 'Heavy Rain + Ice Pallets + Thunderstorm + Mist,Snow + Fog']['count']
fig=plt.figure(figsize=(12,5))
plt.subplot(1,4,1)
sns.histplot(season_1,color='g')
plt.title('weather-1')
plt.subplot(1,4,2)
sns.histplot(season_2,color='r')
plt.title('weather-2')
plt.subplot(1,4,3)
sns.histplot(season_3,color='y')
plt.title('weather-3')
plt.subplot(1,4,4)
sns.histplot(season_4,color='b')
plt.title('weather-4')
plt.suptitle('All 4 seasons count')
plt.show()

"""***so from above,the data is not guassian

## Levene's test
---To check equality of variance between two different samples

## Levene's test
---To check equality of variance between two different samples
"""

#H0: All the samples variances are equal
#Ha: At least one variance is different from the rest
stat, p = levene(weather_1,weather_2,weather_3,weather_4)
print('stat=%.3f, p=%.3f' % (stat, p))
if p > 0.05:
    print('Probably the same variances')
else:
    print('Probably at least one variance is different from the rest')

"""***so from above we can conclude that, there is sightly differnece in number of cycles rented in different weathers...

***since the assumptions of Anova test does not followed,so we use kruskal test
"""

#H0:There is no significance difference between the number of cycles rented in different weathers
#Ha:There is a significance difference between the number of cycles rented in different weathers
stat,p=kruskal(weather_1,weather_2,weather_3,weather_4)
print('stat=%.3f, p=%.3f' % (stat, p))
if p > 0.05:
    print('Accept H0,There is no significance difference between the number of cycles rented in different weathers')
else:
    print('Reject H0,There is a significance difference between the number of cycles rented in different weathers')

"""## 4)To Check whether,Weather is dependent on season

# Chi-Square
"""

table=pd.crosstab(df['weather'],df['season'])
table

#H0:Weather is independent on season
#ha:Weather is dependent on season
stat, p, dof, expected = chi2_contingency(table)
print('stat=%.3f, p=%.3f' % (stat, p))
if p >0.05:
    print('Accept H0 ,weather is independent on season')
else:
    print('Reject H0,weather is dependent on season')

"""***so from above we can conclude that,weather and season are dependent

1)**Working Day Influence:** The analysis suggests that the day of the week (working day or non-working day) does not significantly impact the number of electric cycles rented.

#2)**Seasonal Variations:** There is a statistically significant difference in the number of cycles rented across different seasons.

#3)**Weather Variations:** There is a statistically significant difference in the number of cycles rented across different weathers.

#4)**Weather and Season Dependency:** The analysis indicates a dependency between weather conditions and seasonal variations in the demand for shared electric cycles.

# Recommendations

*   1)**Seasonal Marketing:** Tailor marketing campaigns to highlight benefits during specific seasons.

2)**Dynamic Pricing:** Adjust pricing for peak and off-peak seasons.

3)**Accessories:** Offer weather-appropriate accessories.

4)**Maintenance Planning:** Prioritize cycle maintenance by season.
*
"""

